<?php

namespace common\models;

use common\behaviors\UserBehavior;
use common\models\base\ProductBase;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;

class Product extends ProductBase
{
    const STATUS_DISABLE = 0;
    const STATUS_ACTIVE = 1;
    /**
     * @var UploadedFile
     */
    public $avatarFile;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return ArrayHelper::merge(parent::rules(), [
            [['price_sale', 'price_store', 'stock'], 'default', 'value' => 0],
            [['avatarFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, gif, bmp'],
        ]);
    }

    public function upload()
    {
        if ($this->validate()) {
            if (isset($this->avatarFile)) {
                $path = '/avatar/' . date("Y") . "/" . date("m") . "/" . date("d");
                $file = $this->avatarFile->baseName . "_" . date("U") . '.' . $this->avatarFile->extension;
                $uploadPath = Yii::$app->params['uploadPath'] . $path;
                if (!is_dir($uploadPath))
                    mkdir($uploadPath, 0777, true);
                $this->avatarFile->saveAs($uploadPath . "/" . $file);
                $this->avatar = $path . "/" . $file;
                $this->save(false);
            }
            return true;
        } else {
            $this->addError('avatar', "Không upload được ảnh avatar");
            return false;
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Tên sản phẩm',
            'category_id' => 'Nhóm sản phẩm',
            'search_term' => 'Search Term',
            'price_sale' => 'Giá bán',
            'price_store' => 'Giá nhập',
            'avatar' => 'Avatar',
            'status' => 'Status',
            'slug' => 'Slug',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'description' => 'Mô tả sản phẩm',
            'stock' => 'Số lượng',
            'note' => 'Ghi chú',
            'code' => 'Mã sản phẩm',
        ];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            BlameableBehavior::className(),
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'name',
                'slugAttribute' => 'slug',
            ],
            UserBehavior::className(),
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        if (empty($this->code)) {
            $this->code = "P" . str_pad($this->id, 5, 0, STR_PAD_LEFT);
            $this->update();
        }
        return parent::afterSave($insert, $changedAttributes);
    }

    public function beforeSave($insert)
    {
        $this->search_term = $this->code . "|" . $this->name . "|" . $this->description . "|" . $this->note;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getImages()
    {
        return ProductImage::find()->where(['product_id' => $this->id])->all();
    }
}
