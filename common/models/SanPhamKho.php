<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 3/31/2016
 * Time: 3:05 PM
 */

namespace common\models;


use common\behaviors\UserBehavior;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\Json;
use yii\web\HttpException;

class SanPhamKho extends \common\models\base\SanPhamKho
{
    const STATUS_DRAFT = 0;
    const STATUS_FINISH = 1;

    const DELETED_TRUE = 1;
    const DELETED_FALSE = 0;

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            BlameableBehavior::className(),
            UserBehavior::className(),
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        if (empty($this->ma_goc)) {
            $this->ma_goc = "PR" . str_pad($this->id, 5, 0, STR_PAD_LEFT);//product stock
            $this->update();
        }
        return parent::afterSave($insert, $changedAttributes);
    }

    public function afterFind()
    {
        $this->ngay_nhap = date("d/m/Y", strtotime($this->ngay_nhap));
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        //$this->ngay_nhap = date("Y-m-d", strtotime(str_replace("/", '-', $this->ngay_nhap)));
        if (empty($this->ngay_nhap)) {
            $phieu_nhap = $this->getPhieuNhapHang();
            $this->ngay_nhap = isset($phieu_nhap) ? $phieu_nhap->ngay_nhap : Expression("NOW()");
        }
        $this->search_term = $this->ma_goc . "|" . $this->ma_nhap . "|" . $this->ten . "|" . $this->ghi_chu . "|" . $this->gia_nhap . "|" . $this->gia_ban;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public static function getStatusList($id = null)
    {
        $arr = [self::STATUS_DRAFT => 'Chưa sẵn sàng', self::STATUS_FINISH => "Sẵn sàng xuất kho"];
        return isset($id) ? isset($arr[$id]) ? $arr[$id] : "" : $arr;
    }

    public function getPhieuNhapHang()
    {
        $model = null;
        if ($this->phieu_nhap_id) {
            $model = PhieuNhapHang::findOne($this->phieu_nhap_id);
        }
        return $model;
    }

    public function getMetadata()
    {
        $models = SanPhamMetadata::find()->where(['san_pham_nhap_id' => $this->id])->all();
        if (empty($models)) {
            $meta = Metadata::find()->all();
            foreach ($meta as $item) {
                /**
                 * @var $item Metadata
                 */
                $model = new SanPhamMetadata();
                $model->metadata_id = $item->id;
                $model->metadata_name = $item->name;
                $model->san_pham_nhap_id = $this->id;
                $model->ma_goc = $this->ma_goc;
                if (!$model->save()) {
                    throw new HttpException(404, Json::encode($model->errors));
                }
            }
            $models = SanPhamMetadata::find()->where(['san_pham_nhap_id' => $this->id])->all();
        }
        return $models;
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'ten' => 'Tên sản phẩm',
            'chuyen_muc_id' => 'Chuyên mục',
            'search_term' => 'Search Term',
            'gia_ban' => 'Giá bán',
            'gia_nhap' => 'Giá nhập',
            'avatar' => 'Ảnh',
            'status' => 'Trạng thái',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'mo_ta' => 'Mô tả',
            'so_luong_nhap' => 'Số lượng nhập',
            'so_luong_ton' => 'Số lượng tồn',
            'ghi_chu' => 'Ghi chú',
            'ma_nhap' => 'Mã nhập',
            'ma_goc' => 'Mã hệ thống',
            'deleted' => 'Deleted',
            'ngay_nhap' => 'Ngày nhập',
            'phieu_nhap_id' => 'Phiếu nhập',
        ];
    }

}