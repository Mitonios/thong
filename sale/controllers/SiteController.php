<?php
namespace sale\controllers;

use Yii;
use common\models\Customer;
use common\models\Order;
use common\models\Product;
use common\models\RltOrderProduct;
use yii\helpers\Json;
use yii\helpers\Url;
use yii\web\Controller;
use yii\web\HttpException;


/**
 * Site controller
 */
class SiteController extends Controller
{
    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionRemoveRelation()
    {
        $model = RltOrderProduct::findOne(Yii::$app->request->post('id'));
        $model->delete();
    }

    public function actionAddProduct()
    {
        /**
         * @var $product Product
         * @var $order Order
         */

        $rlt = RltOrderProduct::find()->where(['order_id' => \Yii::$app->request->post('order_id'), 'product_id' => \Yii::$app->request->post('id')])->one();
        if (!$rlt) {
            $product = Product::findOne(\Yii::$app->request->post('id'));
            $order = Order::findOne(\Yii::$app->request->post('order_id'));
            $rlt = new RltOrderProduct();
            $rlt->order_id = $order->id;
            $rlt->product_id = $product->id;
            $rlt->product_code = $product->code;
            $rlt->product_name = $product->name;
            $rlt->avatar_url = $product->avatar;
            $rlt->price_sale = $product->price_sale;
            $rlt->save();
        } else {
            $rlt->updateCounters(['quality' => 1]);
        }
        return $this->renderPartial("product_item", ['model' => $rlt]);
    }

    public function actionIndex()
    {
        $items = Order::find()->where(['status' => Order::STATUS_DRAFT, 'sale_id' => \Yii::$app->user->id])->all();
        if (empty($items)) {
            $model = new Order();
            $model->save();
            $items[] = $model;
        }
        $model = \Yii::$app->request->get('id') ? Order::findOne(\Yii::$app->request->get('id')) : $items[0];

        $products = Product::find()
            ->select(['id', 'name', 'price_sale', 'avatar', 'code', 'stock'])
            ->where(['status' => Product::STATUS_ACTIVE])
            ->all();

        return $this->render('index', ['items' => $items, 'model' => $model, 'products' => $products]);
    }

    public function actionCreate()
    {
        $model = new Order();
        $model->save();
        return $this->redirect(Url::to(['index', 'id' => $model->id]));
    }

    public function actionUpdate($id)
    {
        /**
         * @var $model Order
         */
        $model = Order::findOne($id);
        if ($model->load(\Yii::$app->request->post())) {

            /*if (!$model->update()) {
                throw new HttpException(404, Json::encode($model->errors));
            }*/
            $total_product = 0;
            $total_money = 0;
            if (Yii::$app->request->post('RltOrderProduct')) {
                foreach (Yii::$app->request->post('RltOrderProduct') as $id => $data) {
                    /**
                     * @var $rlt RltOrderProduct
                     */
                    $rlt = RltOrderProduct::findOne($id);
                    $total_product += $rlt->quality;
                    $total_money += $rlt->quality * $rlt->price_sale;
                    foreach ($data as $k => $v) {
                        $rlt->$k = $v;
                    }
                    if (!$rlt->update()) {
                        throw new HttpException(404, Json::encode($rlt->errors));
                    }
                }
            }
            $model->total_money = $total_money;
            $model->total_product = $total_product;
            if (!\Yii::$app->request->isAjax) {
                $model->status = $model::STATUS_FINISH;
                $products = $model->getProducts();
                foreach ($products as $rlt) {
                    /**
                     * @var $product Product
                     */
                    $product = $rlt->product;
                    if ($product) {
                        $product->updateCounters(['stock' => -$rlt->quality]);
                    }
                }
            }
            $model->update();
            if (!\Yii::$app->request->isAjax) {
                return $this->redirect(['index']);
            }
        }
    }

    public function actionDelete($id)
    {
        /**
         * @var $model Order
         */
        $model = Order::findOne($id);
        $model->delete();
        return $this->redirect(\Yii::$app->request->getReferrer());
    }

    public function actionCreateCustomer()
    {
        $model = new Customer();
        if ($model->load(\Yii::$app->request->post())) {
            if ($model->save()) {
                return Json::encode(['code' => 0, 'msg' => 'success', 'id' => $model->id]);
            } else {
                throw new HttpException(404, Json::encode(['code' => 1, 'msg' => $model->errors]));
            }
        }
        throw new HttpException(404, Json::encode(['code' => 1, 'msg' => 'Lỗi j đó']));
    }

    public function actionSearchCustomer()
    {
        $search_term = \Yii::$app->request->get('q');
        $rs = \Yii::$app->db->createCommand("SELECT id,name FROM customer WHERE search_term LIKE '%{$search_term}%' ORDER BY name ASC LIMIT 10")->queryAll();
        return Json::encode($rs);
    }

    public function actionSearchProduct()
    {
        $search_term = \Yii::$app->request->get('q');
        $items = \Yii::$app->db->createCommand("SELECT id,name,price_sale,avatar,stock,code,note FROM product WHERE search_term LIKE '%{$search_term}%'
        AND status=" . Product::STATUS_ACTIVE . " ORDER BY name ASC LIMIT 10")->queryAll();
        foreach ($items as $k => $v) {
            $items[$k] = [
                'id' => $v['id'],
                'name' => $v['name'],
                'price_sale' => number_format($v['price_sale']),
                'avatar' => Yii::$app->params['uploadUrl'] . $v['avatar'],
                'stock' => $v['stock'],
                'code' => $v['code'],
                'note' => $v['note'],
            ];
        }
        $rs = [
            'total_count' => count($items),
            'items' => $items
        ];
        return Json::encode($rs);
    }

    public function actionLoadCustomer()
    {
        $id = \Yii::$app->request->post('id');
        $model = Customer::findOne($id);
        return $this->renderPartial("customer_info", ['model' => $model]);
    }
}
